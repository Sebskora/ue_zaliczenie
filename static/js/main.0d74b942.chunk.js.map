{"version":3,"sources":["serviceWorker.js","components/Firebase/context.js","components/Firebase/firebase.js","components/Firebase/index.js","components/SignOut/index.js","constants/routes.js","components/Session/context.js","components/Session/withAuthentication.js","components/Session/withAuthorization.js","components/Navigation/index.js","components/Landing/index.js","components/SignUp/index.js","components/PasswordForget/index.js","components/SignIn/index.js","components/Home/index.js","components/PasswordChange/index.js","components/Account/index.js","components/Admin/index.js","components/App/index.js","index.js"],"names":["Boolean","window","location","hostname","match","FirebaseContext","React","createContext","withFirebase","Component","props","Consumer","firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Firebase","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","user","uid","db","ref","users","app","initializeApp","this","database","type","onClick","SIGN_UP","SIGN_IN","HOME","ACCOUNT","ADMIN","PASSWORD_FORGET","AuthUserContext","withAuthentication","WithAuthentication","state","authUser","listener","onAuthStateChanged","setState","Provider","value","withAuthorization","condition","WithAuthorization","history","push","ROUTES","compose","withRouter","NavigationAuth","to","SignOut","NavigationNonAuth","Navigation","Landing","INITIAL_STATE","username","passwordOne","passwordTwo","error","SignUpFormBase","onSubmit","event","then","set","catch","preventDefault","onChange","target","name","isInvalid","placeholder","disabled","message","SignUpLink","SignUpForm","SignUpPage","PasswordForgetFormBase","PasswordForgetLink","PasswordForgetPage","PasswordForgetForm","SignInFormBase","SignInForm","SignInPage","PasswordChangeForm","PasswordChange","AdminPage","loading","isAuth","on","snapshot","usersObject","val","console","log","usersList","Object","keys","map","key","off","UserList","exact","path","component","LandingPage","HomePage","AccountPage","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0d74b942.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst FirebaseContext = React.createContext(null);\n\nexport const withFirebase = (Component) => (props) => (\n  <FirebaseContext.Consumer>\n    {firebase => <Component {...props} firebase={firebase} />}\n  </FirebaseContext.Consumer>\n);\n\nexport default FirebaseContext;\n","import app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\n\nconst config = {\n  apiKey: \"AIzaSyDQ_Ji1y-R15LlLH2q4jLpTTFHMaMzCgAc\",\n  authDomain: \"movies-app-16c61.firebaseapp.com\",\n  databaseURL: \"https://movies-app-16c61.firebaseio.com\",\n  projectId: \"movies-app-16c61\",\n  storageBucket: \"movies-app-16c61.appspot.com\",\n  messagingSenderId: \"181723343549\",\n  appId: \"1:181723343549:web:4f712b21963a66caef25d4\",\n  measurementId: \"G-Q5QMT2GWSJ\"\n};\n\n\nclass Firebase {\n  constructor() {\n    app.initializeApp(config);\n\n    this.auth = app.auth();\n    this.db = app.database();\n  }\n\n  // *** Auth API ***\n\n  doCreateUserWithEmailAndPassword = (email, password) =>\n    this.auth.createUserWithEmailAndPassword(email, password);\n\n  doSignInWithEmailAndPassword = (email, password) =>\n    this.auth.signInWithEmailAndPassword(email, password);\n\n  doSignOut = () => this.auth.signOut();\n\n  doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n  doPasswordUpdate = password =>\n    this.auth.currentUser.updatePassword(password);\n\n  // *** User API ***\n\n  user = uid => this.db.ref(`users/${uid}`);\n\n  users = () => this.db.ref('users');\n}\n\nexport default Firebase;\n","import FirebaseContext, { withFirebase } from './context';\nimport Firebase from './firebase';\n\nexport default Firebase;\n\nexport { FirebaseContext, withFirebase };\n","import React from 'react';\n\nimport { withFirebase } from '../Firebase';\n\nconst SignOutButton = ({ firebase }) => (\n  <button type=\"button\" onClick={firebase.doSignOut}>\n    Sign Out\n  </button>\n);\n\nexport default withFirebase(SignOutButton);\n","export const SIGN_UP = '/signup';\nexport const SIGN_IN = '/signin';\nexport const LANDING = '/';\nexport const HOME = '/home';\nexport const ACCOUNT = '/account';\nexport const ADMIN = '/admin';\nexport const PASSWORD_FORGET = '/pw-forget';\n","import React from 'react';\n\nconst AuthUserContext = React.createContext(null);\n\nexport default AuthUserContext;\n","import React from 'react';\n\nimport AuthUserContext from './context';\nimport { withFirebase } from '../Firebase';\n\nconst withAuthentication = Component => {\n  class WithAuthentication extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        authUser: null,\n      };\n    }\n\n    componentDidMount() {\n      this.listener = this.props.firebase.auth.onAuthStateChanged(\n        authUser => {\n          authUser\n            ? this.setState({ authUser })\n            : this.setState({ authUser: null });\n        },\n      );\n    }\n\n    componentWillUnmount() {\n      this.listener();\n    }\n\n    render() {\n      return (\n        <AuthUserContext.Provider value={this.state.authUser}>\n          <Component {...this.props} />\n        </AuthUserContext.Provider>\n      );\n    }\n  }\n\n  return withFirebase(WithAuthentication);\n};\n\nexport default withAuthentication;\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'recompose';\n\nimport AuthUserContext from './context';\nimport { withFirebase } from '../Firebase';\nimport * as ROUTES from '../../constants/routes';\n\nconst withAuthorization = condition => Component => {\n  class WithAuthorization extends React.Component {\n    componentDidMount() {\n      this.listener = this.props.firebase.auth.onAuthStateChanged(\n        authUser => {\n          if (!condition(authUser)) {\n            this.props.history.push(ROUTES.SIGN_IN);\n          }\n        },\n      );\n    }\n\n    componentWillUnmount() {\n      this.listener();\n    }\n\n    render() {\n      return (\n        <AuthUserContext.Consumer>\n          {authUser =>\n            condition(authUser) ? <Component {...this.props} /> : null\n          }\n        </AuthUserContext.Consumer>\n      );\n    }\n  }\n\n  return compose(\n    withRouter,\n    withFirebase,\n  )(WithAuthorization);\n};\n\nexport default withAuthorization;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport SignOutButton from '../SignOut';\nimport * as ROUTES from '../../constants/routes';\n\nimport { AuthUserContext } from '../Session';\n\nconst Navigation = () => (\n  <div>\n    <AuthUserContext.Consumer>\n      {authUser =>\n        authUser ? <NavigationAuth /> : <NavigationNonAuth />\n      }\n    </AuthUserContext.Consumer>\n  </div>\n);\n\nconst NavigationAuth = () => (\n  <ul>\n    <li>\n      <Link to={ROUTES.LANDING}>Landing</Link>\n    </li>\n    <li>\n      <Link to={ROUTES.HOME}>Home</Link>\n    </li>\n    <li>\n      <Link to={ROUTES.ACCOUNT}>Account</Link>\n    </li>\n    <li>\n      <Link to={ROUTES.ADMIN}>Admin</Link>\n    </li>\n    <li>\n      <SignOutButton />\n    </li>\n  </ul>\n);\n\nconst NavigationNonAuth = () => (\n  <ul>\n    <li>\n      <Link to={ROUTES.LANDING}>Landing</Link>\n    </li>\n    <li>\n      <Link to={ROUTES.SIGN_IN}>Sign In</Link>\n    </li>\n  </ul>\n);\n\nexport default Navigation;\n","import React from 'react';\n\nconst Landing = () => (\n  <div>\n    <h1>Landing</h1>\n  </div>\n);\n\nexport default Landing;\n","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\n\nimport { withFirebase } from '../Firebase';\nimport * as ROUTES from '../../constants/routes';\n\nconst SignUpPage = () => (\n  <div>\n    <h1>SignUp</h1>\n    <SignUpForm />\n  </div>\n);\n\nconst INITIAL_STATE = {\n  username: '',\n  email: '',\n  passwordOne: '',\n  passwordTwo: '',\n  error: null,\n};\n\nclass SignUpFormBase extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { ...INITIAL_STATE };\n  }\n\n  onSubmit = event => {\n    const { username, email, passwordOne } = this.state;\n\n    this.props.firebase\n      .doCreateUserWithEmailAndPassword(email, passwordOne)\n      .then(authUser => {\n        // Create a user in your Firebase realtime database\n        this.props.firebase\n          .user(authUser.user.uid)\n          .set({\n            username,\n            email,\n          })\n          .then(() => {\n            this.setState({ ...INITIAL_STATE });\n            this.props.history.push(ROUTES.HOME);\n          })\n          .catch(error => {\n            this.setState({ error });\n          });\n      })\n      .catch(error => {\n        this.setState({ error });\n      });\n\n    event.preventDefault();\n  };\n\n  onChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  render() {\n    const {\n      username,\n      email,\n      passwordOne,\n      passwordTwo,\n      error,\n    } = this.state;\n\n    const isInvalid =\n      passwordOne !== passwordTwo ||\n      passwordOne === '' ||\n      email === '' ||\n      username === '';\n\n    return (\n      <form onSubmit={this.onSubmit}>\n        <input\n          name=\"username\"\n          value={username}\n          onChange={this.onChange}\n          type=\"text\"\n          placeholder=\"Full Name\"\n        />\n        <input\n          name=\"email\"\n          value={email}\n          onChange={this.onChange}\n          type=\"text\"\n          placeholder=\"Email Address\"\n        />\n        <input\n          name=\"passwordOne\"\n          value={passwordOne}\n          onChange={this.onChange}\n          type=\"password\"\n          placeholder=\"Password\"\n        />\n        <input\n          name=\"passwordTwo\"\n          value={passwordTwo}\n          onChange={this.onChange}\n          type=\"password\"\n          placeholder=\"Confirm Password\"\n        />\n        <button disabled={isInvalid} type=\"submit\">\n          Sign Up\n        </button>\n\n        {error && <p>{error.message}</p>}\n      </form>\n    );\n  }\n}\n\nconst SignUpLink = () => (\n  <p>\n    Don't have an account? <Link to={ROUTES.SIGN_UP}>Sign Up</Link>\n  </p>\n);\n\nconst SignUpForm = withRouter(withFirebase(SignUpFormBase));\n\nexport default SignUpPage;\n\nexport { SignUpForm, SignUpLink };\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { withFirebase } from '../Firebase';\nimport * as ROUTES from '../../constants/routes';\n\nconst PasswordForgetPage = () => (\n  <div>\n    <h1>PasswordForget</h1>\n    <PasswordForgetForm />\n  </div>\n);\n\nconst INITIAL_STATE = {\n  email: '',\n  error: null,\n};\n\nclass PasswordForgetFormBase extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { ...INITIAL_STATE };\n  }\n\n  onSubmit = event => {\n    const { email } = this.state;\n\n    this.props.firebase\n      .doPasswordReset(email)\n      .then(() => {\n        this.setState({ ...INITIAL_STATE });\n      })\n      .catch(error => {\n        this.setState({ error });\n      });\n\n    event.preventDefault();\n  };\n\n  onChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  render() {\n    const { email, error } = this.state;\n\n    const isInvalid = email === '';\n\n    return (\n      <form onSubmit={this.onSubmit}>\n        <input\n          name=\"email\"\n          value={this.state.email}\n          onChange={this.onChange}\n          type=\"text\"\n          placeholder=\"Email Address\"\n        />\n        <button disabled={isInvalid} type=\"submit\">\n          Reset My Password\n        </button>\n\n        {error && <p>{error.message}</p>}\n      </form>\n    );\n  }\n}\n\nconst PasswordForgetLink = () => (\n  <p>\n    <Link to={ROUTES.PASSWORD_FORGET}>Forgot Password?</Link>\n  </p>\n);\n\nexport default PasswordForgetPage;\n\nconst PasswordForgetForm = withFirebase(PasswordForgetFormBase);\n\nexport { PasswordForgetForm, PasswordForgetLink };\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'recompose';\n\nimport { SignUpLink } from '../SignUp';\nimport { PasswordForgetLink } from '../PasswordForget';\nimport { withFirebase } from '../Firebase';\nimport * as ROUTES from '../../constants/routes';\n\nconst SignInPage = () => (\n  <div>\n    <h1>SignIn</h1>\n    <SignInForm />\n    <PasswordForgetLink />\n    <SignUpLink />\n  </div>\n);\n\nconst INITIAL_STATE = {\n  email: '',\n  password: '',\n  error: null,\n};\n\nclass SignInFormBase extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { ...INITIAL_STATE };\n  }\n\n  onSubmit = event => {\n    const { email, password } = this.state;\n\n    this.props.firebase\n      .doSignInWithEmailAndPassword(email, password)\n      .then(() => {\n        this.setState({ ...INITIAL_STATE });\n        this.props.history.push(ROUTES.HOME);\n      })\n      .catch(error => {\n        this.setState({ error });\n      });\n\n    event.preventDefault();\n  };\n\n  onChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  render() {\n    const { email, password, error } = this.state;\n\n    const isInvalid = password === '' || email === '';\n\n    return (\n      <form onSubmit={this.onSubmit}>\n        <input\n          name=\"email\"\n          value={email}\n          onChange={this.onChange}\n          type=\"text\"\n          placeholder=\"Email Address\"\n        />\n        <input\n          name=\"password\"\n          value={password}\n          onChange={this.onChange}\n          type=\"password\"\n          placeholder=\"Password\"\n        />\n        <button disabled={isInvalid} type=\"submit\">\n          Sign In\n        </button>\n\n        {error && <p>{error.message}</p>}\n      </form>\n    );\n  }\n}\n\nconst SignInForm = compose(\n  withRouter,\n  withFirebase,\n)(SignInFormBase);\n\nexport default SignInPage;\n\nexport { SignInForm };\n","import React from 'react';\n\nimport { withAuthorization } from '../Session';\n\nconst HomePage = () => (\n  <div>\n    <h1>Home Page</h1>\n  </div>\n);\n\nconst condition = authUser => !!authUser;\n\nexport default withAuthorization(condition)(HomePage);\n","import React, { Component } from 'react';\n\nimport { withFirebase } from '../Firebase';\n\nconst INITIAL_STATE = {\n  passwordOne: '',\n  passwordTwo: '',\n  error: null,\n};\n\nclass PasswordChangeForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { ...INITIAL_STATE };\n  }\n\n  onSubmit = event => {\n    const { passwordOne } = this.state;\n\n    this.props.firebase\n      .doPasswordUpdate(passwordOne)\n      .then(() => {\n        this.setState({ ...INITIAL_STATE });\n      })\n      .catch(error => {\n        this.setState({ error });\n      });\n\n    event.preventDefault();\n  };\n\n  onChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  render() {\n    const { passwordOne, passwordTwo, error } = this.state;\n\n    const isInvalid =\n      passwordOne !== passwordTwo || passwordOne === '';\n\n    return (\n      <form onSubmit={this.onSubmit}>\n        <input\n          name=\"passwordOne\"\n          value={passwordOne}\n          onChange={this.onChange}\n          type=\"password\"\n          placeholder=\"New Password\"\n        />\n        <input\n          name=\"passwordTwo\"\n          value={passwordTwo}\n          onChange={this.onChange}\n          type=\"password\"\n          placeholder=\"Confirm New Password\"\n        />\n        <button disabled={isInvalid} type=\"submit\">\n          Reset My Password\n        </button>\n\n        {error && <p>{error.message}</p>}\n      </form>\n    );\n  }\n}\n\nexport default withFirebase(PasswordChangeForm);\n","import React from 'react';\n\nimport { AuthUserContext } from '../Session';\nimport { PasswordForgetForm } from '../PasswordForget';\nimport PasswordChangeForm from '../PasswordChange';\nimport { withAuthorization } from '../Session';\n\nconst AccountPage = () => (\n  <AuthUserContext.Consumer>\n    {authUser => (\n      <div>\n        <h1>Account: {authUser.email}</h1>\n        <PasswordForgetForm />\n        <PasswordChangeForm />\n      </div>\n    )}\n  </AuthUserContext.Consumer>\n);\n\nconst authCondition = authUser => !!authUser;\n\nexport default withAuthorization(authCondition)(AccountPage);\n","import React, { Component } from 'react';\nimport { withFirebase } from '../Firebase';\nimport { withAuthorization } from '../Session';\nimport * as ROUTES from '../../constants/routes';\nclass AdminPage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      isAuth: false,\n      users: [],\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ loading: true });\n    this.props.firebase.auth.onAuthStateChanged(authUser => {\n      // NO AUTH\n      if (authUser.email !== \"admin@o2.pl\") {\n        this.props.history.push(ROUTES.HOME);\n      }\n\n    })\n    this.props.firebase.users().on('value', snapshot => {\n\n      const usersObject = snapshot.val();\n      console.log(usersObject)\n      const usersList = Object.keys(usersObject).map(key => ({\n        ...usersObject[key],\n        uid: key,\n      }));\n\n      this.setState({\n        users: usersList,\n        loading: false,\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.props.firebase.users().off();\n  }\n\n  render() {\n    const { users, loading } = this.state;\n\n    return (\n      <div>\n        <h1>Admin</h1>\n        <h2>Lista uzytkowników:</h2>\n        {loading && <div>Loading ...</div>}\n\n        <UserList users={users} />\n      </div >\n    );\n  }\n}\n\nconst UserList = ({ users }) => (\n  <ul>\n    {users.map(user => (\n      <div>\n\n        <li key={user.uid}>\n          <span>\n            <strong>ID:</strong> {user.uid}\n          </span>\n          <span>\n            <strong>E-Mail:</strong> {user.email}\n          </span>\n          <span>\n\n            <strong>Username:</strong> {user.username}\n          </span>\n        </li>\n\n      </div>\n    ))}\n  </ul >\n);\n\n\nconst condition = authUser =>\n  !!authUser\n\nexport default withFirebase(withAuthorization(condition)(AdminPage))\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Navigation from '../Navigation';\nimport LandingPage from '../Landing';\nimport SignUpPage from '../SignUp';\nimport SignInPage from '../SignIn';\nimport PasswordForgetPage from '../PasswordForget';\nimport HomePage from '../Home';\nimport AccountPage from '../Account';\nimport AdminPage from '../Admin';\n\nimport * as ROUTES from '../../constants/routes';\nimport { withAuthentication } from '../Session';\n\n\nconst App = () => (\n\n  <Router>\n    <div>\n      <Navigation />\n\n      <hr />\n\n      <Route exact path={ROUTES.LANDING} component={LandingPage} />\n      <Route exact path={ROUTES.SIGN_UP} component={SignUpPage} />\n      <Route exact path={ROUTES.SIGN_IN} component={SignInPage} />\n      <Route\n        exact\n        path={ROUTES.PASSWORD_FORGET}\n        component={PasswordForgetPage}\n      />\n      <Route exact path={ROUTES.HOME} component={HomePage} />\n      <Route exact path={ROUTES.ACCOUNT} component={AccountPage} />\n      <Route exact path={ROUTES.ADMIN} component={AdminPage} />\n    </div>\n  </Router>\n);\n\nexport default withAuthentication(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './components/App';\nimport Firebase, { FirebaseContext } from './components/Firebase';\n\nReactDOM.render(\n  <FirebaseContext.Provider value={new Firebase()}>\n    <App />\n  </FirebaseContext.Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}